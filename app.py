# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBqEZln7C8krda4pQJoyDeTyj9jaHC5l
"""

from flask import Flask, request, send_file, jsonify
from obspy import read
import requests
import io
import datetime
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Para entornos sin pantalla

app = Flask(__name__)

# Función auxiliar para calcular el intervalo de tiempo
def calculate_time_difference(start, end):
    start_time = datetime.datetime.fromisoformat(start)
    end_time = datetime.datetime.fromisoformat(end)
    difference = end_time - start_time
    return difference.total_seconds() / 60  # Diferencia en minutos

# Ruta principal para decidir entre sismograma y helicorder
@app.route('/generate_graph', methods=['GET'])
def generate_graph():
    try:
        start = request.args.get('start')
        end = request.args.get('end')
        interval_minutes = calculate_time_difference(start, end)

        # Limitar el rango de tiempo a 60 minutos
        if interval_minutes > 60:
            return jsonify({"error": "El intervalo de tiempo no puede exceder 60 minutos."}), 400

        if interval_minutes <= 30:
            return generate_sismograma()
        else:
            return generate_helicorder()

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error: {str(e)}"}), 500

# Función para generar sismograma
@app.route('/generate_sismograma', methods=['GET'])
def generate_sismograma():
    try:
        # Obtener parámetros de la solicitud
        net = request.args.get('net')
        sta = request.args.get('sta')
        loc = request.args.get('loc')
        cha = request.args.get('cha')
        start = request.args.get('start')
        end = request.args.get('end')

        if not all([net, sta, loc, cha, start, end]):
            return jsonify({"error": "Faltan parámetros requeridos"}), 400

        url = f"http://osso.univalle.edu.co/fdsnws/dataselect/1/query?starttime={start}&endtime={end}&network={net}&station={sta}&location={loc}&channel={cha}&nodata=404"

        try:
            response = requests.get(url, timeout=60)  # Timeout de 60 segundos
            response.raise_for_status()
        except requests.exceptions.Timeout:
            return jsonify({"error": "El servidor remoto no respondió a tiempo."}), 504
        except requests.exceptions.RequestException as e:
            return jsonify({"error": f"Error en la solicitud al servidor remoto: {str(e)}"}), 500

        mini_seed_data = io.BytesIO(response.content)

        try:
            st = read(mini_seed_data)
        except Exception as e:
            return jsonify({"error": f"Error procesando los datos MiniSEED: {str(e)}"}), 500

        tr = st[0]
        times = [tr.stats.starttime.datetime + datetime.timedelta(seconds=sec) for sec in tr.times()]
        data = tr.data[::10]  # Reducir resolución para ahorrar memoria

        fig, ax = plt.subplots(figsize=(10, 4))
        ax.plot(times, data, color='black', linewidth=0.8)
        ax.set_title(f"{start} - {end}", fontsize=10)
        ax.set_xlabel("Tiempo")
        ax.set_ylabel("Amplitud")
        ax.text(0.02, 0.98, f"{net}.{sta}.{loc}.{cha}", transform=ax.transAxes,
                fontsize=9, verticalalignment='top', bbox=dict(facecolor='white', edgecolor='black'))
        fig.autofmt_xdate()

        output_image = io.BytesIO()
        plt.savefig(output_image, format='png', dpi=100, bbox_inches="tight")
        output_image.seek(0)
        plt.close(fig)

        return send_file(output_image, mimetype='image/png')

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error: {str(e)}"}), 500

# Función para generar helicorder
@app.route('/generate_helicorder', methods=['GET'])
def generate_helicorder():
    try:
        net = request.args.get('net')
        sta = request.args.get('sta')
        loc = request.args.get('loc')
        cha = request.args.get('cha')
        start = request.args.get('start')
        end = request.args.get('end')

        if not all([net, sta, loc, cha, start, end]):
            return jsonify({"error": "Faltan parámetros requeridos"}), 400

        url = f"http://osso.univalle.edu.co/fdsnws/dataselect/1/query?starttime={start}&endtime={end}&network={net}&station={sta}&location={loc}&channel={cha}&nodata=404"

        try:
            response = requests.get(url, timeout=60)
            response.raise_for_status()
        except requests.exceptions.Timeout:
            return jsonify({"error": "El servidor remoto no respondió a tiempo."}), 504
        except requests.exceptions.RequestException as e:
            return jsonify({"error": f"Error en la solicitud al servidor remoto: {str(e)}"}), 500

        mini_seed_data = io.BytesIO(response.content)

        try:
            st = read(mini_seed_data)
        except Exception as e:
            return jsonify({"error": f"Error procesando los datos MiniSEED: {str(e)}"}), 500

        fig = st.plot(
            type="dayplot",
            interval=30,
            vertical_scaling_range=2000,
            color=['k', 'r', 'b'],
            show_y_UTC_label=True
        )

        output_image = io.BytesIO()
        fig.savefig(output_image, format='png', dpi=100, bbox_inches="tight")
        output_image.seek(0)
        plt.close(fig)

        return send_file(output_image, mimetype='image/png')

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

